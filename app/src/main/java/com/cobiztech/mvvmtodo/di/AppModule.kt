package com.cobiztech.mvvmtodo.di

import android.app.Application
import androidx.room.Room
import com.cobiztech.mvvmtodo.data.TaskDatabase
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.android.components.ApplicationComponent
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.SupervisorJob
import javax.inject.Qualifier
import javax.inject.Singleton

@Module
@InstallIn(ApplicationComponent::class)
object AppModule {
    // Note:
    // Module - teaches dagger how to create object-dependencies.
    // ApplicationComponent - (dagger autogenerated class) contains dependencies scoped to Application-level.
    // method return-type - matches the object instance to create e.g TaskDao, UserDao.
    // @Provides - annotation marking a dagger-method.
    // required-dependencies are passed as method-args e.g fun provideTaskDao(arg1 : dependency1, arg2: dependency2){ ... return TaskDao }

    // create a singleton database-instance.
    @Provides
    @Singleton
    fun provideDatabase(
        app: Application,
        callback: TaskDatabase.Callback
    ) = Room.databaseBuilder(app, TaskDatabase::class.java, "task_database")
        .fallbackToDestructiveMigration()
        .addCallback(callback) // insert dummy-data into database.
        .build()

    // create TaskDao instance - pass required dependencies as method-params.
    @Provides
    fun provideTaskDao(db: TaskDatabase) = db.taskDao()

    // Create a coroutineScope - scoped to application (lives as long as application).
    @ApplicationScope
    @Provides
    @Singleton
    fun provideApplicationScope() = CoroutineScope(SupervisorJob())
}

// Qualifier annotation - if app uses different coroutineScopes, its ambiguous to identify which one (explicitly tell dagger which CoroutineScope to inject).
@Retention(AnnotationRetention.RUNTIME)
@Qualifier
annotation class ApplicationScope