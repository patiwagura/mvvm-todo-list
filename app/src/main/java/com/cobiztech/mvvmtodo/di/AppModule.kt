package com.cobiztech.mvvmtodo.di

import android.app.Application
import androidx.room.Room
import com.cobiztech.mvvmtodo.data.TaskDatabase
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.android.components.ApplicationComponent
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.SupervisorJob
import javax.inject.Qualifier
import javax.inject.Singleton

@Module
@InstallIn(ApplicationComponent::class)
object AppModule {
    // Note:
    // Module - teaches/instructs dagger on how to create object-dependencies.
    // method return-type - must match the object instance to create e.g TaskDao, TaskDatabase.
    // ApplicationComponent - (dagger autogenerated class) contains dependencies scoped to Application-level.

    @Provides
    @Singleton
    fun provideDatabase(
        app: Application,
        callback: TaskDatabase.Callback
    ) = Room.databaseBuilder(app, TaskDatabase::class.java, "task_database")
        .fallbackToDestructiveMigration()
        .addCallback(callback) // insert dummy data into database.
        .build()

    // provide/create TaskDao instance.
    @Provides
    fun provideTaskDao(db: TaskDatabase) = db.taskDao()

    // provide a coroutineScope - scoped to application
    @ApplicationScope
    @Provides
    @Singleton
    fun provideApplicationScope() = CoroutineScope(SupervisorJob())
}

// Qualifier - to explicitly tell dagger which CoroutineScope to inject.
@Retention(AnnotationRetention.RUNTIME)
@Qualifier
annotation class ApplicationScope